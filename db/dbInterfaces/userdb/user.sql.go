// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package userdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT COUNT(*) 
FROM users 
WHERE email = $1
`

// Check if the email already exists
func (q *Queries) CheckEmailExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password)
VALUES ($1, $2, $3)
RETURNING user_id, username, email, created_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

type CreateUserRow struct {
	UserID    int32
	Username  string
	Email     string
	CreatedAt pgtype.Timestamp
}

// Create a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, username, email, created_at, updated_at
FROM users
`

type GetAllUsersRow struct {
	UserID    int32
	Username  string
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// Get all users (for admin purposes)
func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, email, password, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	UserID    int32
	Username  string
	Email     string
	Password  string
	CreatedAt pgtype.Timestamp
}

// Get user by email (used for login)
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $1, updated_at = $2
WHERE user_id = $3
RETURNING user_id, username, email, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	Password  string
	UpdatedAt pgtype.Timestamp
	UserID    int32
}

type UpdateUserPasswordRow struct {
	UserID    int32
	Username  string
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// Update user password
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (UpdateUserPasswordRow, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Password, arg.UpdatedAt, arg.UserID)
	var i UpdateUserPasswordRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
